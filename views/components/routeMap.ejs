<%- include('../partials/commonheader') -%>

<% if (locals.userType.includes('Admin')) { %>
    <%- include('../admin/navigation') -%>
<% } else if (locals.userType.includes('Driver')) { %>
    <%- include('../driver/navigation') -%>
<% } else if (locals.userType.includes('User')) { %>
    <%- include('../user/navigation') -%>
<% } %>

<style>
    #busRoute {
        width: 350px;
        height: 500px;
        opacity: 0.8;
        font-size: 24px;
    }

    #routePath {
        fill: none;
        stroke: #333;
        stroke-width: 2px;
        transition: stroke-dashoffset 1s ease-in-out;
    }
    h4{
        display: flex;
        justify-content: space-between;
    }
</style>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-12">
            <div class="alert alert-primary" role="alert">
                <h2>Bus Schedule Chart</h2>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h4><span id="busInfo"></span> <div class="dropdown d-inline float-end">
                    <button class="btn btn-secondary dropdown-toggle" type="button"
                        id="dropdownMenuButton" data-toggle="dropdown"
                        aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-info-circle"></i>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end"
                        aria-labelledby="instructionsDropdown">
                        <li>
                            <h6 class="dropdown-header">Bus Status Colors:</h6>
                        </li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li><a class="dropdown-item" href="#">
                                <span class="badge badge-primary">Ready or
                                    Live</span></a></li>
                        <li><a class="dropdown-item" href="#">
                                <span class="badge bg-warning">In Traffic</span></a>
                        </li>
                        <li><a class="dropdown-item" href="#">
                                <span class="badge bg-success">Arrived</span></a>
                        </li>
                        <li><a class="dropdown-item" href="#">
                                <span class="badge bg-danger">Stop</span></a></li>
                    </ul>
                </div></h4>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <h5>
                        Source - <span class="badge badge-info" id="source-stop"></span>
                    </h5>
                    <h5>
                        Currently at - <span class="badge badge-primary" id="currently-at"></span>
                    </h5>
                    <h5>
                        Destination - <span class="badge badge-success" id="destination-stop"></span>
                    </h5>
                    <h5>
                        Total Stops - <span class="badge badge-info" id="total-stops"></span>
                    </h5>
                </div>
                <svg id="busRoute" preserveAspectRatio="xMidYMid meet"></svg>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function(){
        // --------------------------------------------------
        // User Defined functions
        // --------------------------------------------------
        function addLoadingSpinner() {
            $('#loading-overlay').addClass('loading-overlay');
            $('#spinner').addClass('spinner');
        }
        // -----------------------------------------------
        // -----------------------------------------------
        addLoadingSpinner();
    });


    function removeLoadingSpinner() {
        var loadingOverlay = document.getElementById('loading-overlay');
        var spinner = document.getElementById('spinner');

        // Remove the 'loading-overlay' class
        loadingOverlay.classList.remove('loading-overlay');

        // Remove the 'spinner' class
        spinner.classList.remove('spinner');
    }


    function createBusRoute(numStops, busStops, currentStop, arrivalTimeArray) {
        const busRoute = document.getElementById("busRoute");
        let viewBox = "200 50 100 " + numStops * 100;
        busRoute.setAttribute("style", `height:${numStops * 100}px`);
        busRoute.setAttribute("viewBox", viewBox);

        const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
        const startY = 100; // Starting y-coordinate
        const distance = 100; // Distance between each point
        let pathData = "";

        for (let i = 0; i < numStops; i++) {
            const x = 100; // x-coordinate (fixed value)
            const y = startY + i * distance; // Calculate y-coordinate

            const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
            circle.setAttribute("class", "busStop");
            circle.setAttribute("cx", x);
            circle.setAttribute("cy", y);
            circle.setAttribute("r", "10");

            if (currentStop == busStops[i]) {
                circle.setAttribute("r", "12");
                circle.setAttribute("style", "fill: #007bff; animation: pulse1 1s infinite; ");
            } else if (busStops.indexOf(currentStop) > i) {
                circle.setAttribute("style", "fill: red; animation: none;");
            } else {
                circle.setAttribute("style", "fill: #28a745; animation: none;");
            }

            busRoute.appendChild(circle);

            const label = document.createElementNS("http://www.w3.org/2000/svg", "text");
            label.setAttribute("class", "busLabel");
            label.setAttribute("x", x + 15);
            label.setAttribute("y", y + 5);
            label.textContent = busStops[i];
            busRoute.appendChild(label);

            const innerSpan = document.createElementNS("http://www.w3.org/2000/svg", "text");
            innerSpan.setAttribute("class", "busLabel");
            innerSpan.setAttribute("x", x + 15);
            innerSpan.setAttribute("y", y + 25);

            const fixedDate = "1970-01-01";
            const dateTimeString = fixedDate + "T" + arrivalTimeArray[i] + "Z";
            let formattedArrivalDate = new Date(dateTimeString);
            formattedArrivalDate.setHours(formattedArrivalDate.getHours() - 5);
            formattedArrivalDate.setMinutes(formattedArrivalDate.getMinutes() - 30);

            innerSpan.textContent = new Date(formattedArrivalDate).toLocaleTimeString();
            innerSpan.setAttribute("style", "font-size: 18px;");
            busRoute.appendChild(innerSpan);

            if (i === 0) {
                pathData += `M${x} ${y}`;
            } else {
                pathData += ` L${x} ${y}`;
            }
        }

        path.setAttribute("d", pathData);
        path.setAttribute("id", "routePath");
        busRoute.appendChild(path);
    }

    async function fetchRouteDetails() {
        try {
            const busId = '<%= routeDetails[0].bus_id %>';
            const response = await fetch(`/api/v1/route-detail/${busId}`);
            const routeData = await response.json();

            if (routeData.length > 0) {
                const routeDetails = routeData[0];
                const numStops = routeData.length + 2;
                const busStops = [];
                const arrivalTimeArray = [];

                const originStation = routeDetails.bus_origin;
                const destinationStation = routeDetails.bus_destination;
                const currentStop = routeDetails.current_stop;

                // Testing Dispaly data
                // ----------------------------------------
                let totalStops = document.getElementById('total-stops');
                totalStops.innerText = numStops;

                 // Setting data to target elements
                let sourceStation = document.getElementById('source-stop');
                sourceStation.innerText = originStation;
                let destinationStop = document.getElementById('destination-stop');
                destinationStop.innerText = destinationStation;
                
                let currentlyAt = document.getElementById('currently-at');
                currentlyAt.innerText = currentStop;


                
                // ----------------------------------------
                const timeString = routeDetails.arrival_time.replace("+00", "");

                let time = new Date(`2000-01-01T${timeString}`);
                time.setMinutes(time.getMinutes() - 10);
                const result = time.toTimeString().slice(0, 8);
                busStops.push(originStation);
                arrivalTimeArray.push(result);

                routeData.forEach(element => {
                    busStops.push(element.route_name);
                    arrivalTimeArray.push(element.arrival_time.replace("+00", ""));
                });

                const lastArrivalTime = arrivalTimeArray[arrivalTimeArray.length - 1];
                time = new Date(`2000-01-01T${lastArrivalTime}`);
                time.setMinutes(time.getMinutes() + 10);
                const formattedLastArrivalTime = time.toTimeString().slice(0, 8);

                busStops.push(routeDetails.bus_destination);
                arrivalTimeArray.push(formattedLastArrivalTime);

                document.getElementById("busInfo").innerText = `${routeDetails.bus_id} - ${routeDetails.bus_name}`;
                document.getElementById("busInfo").innerHTML += `<span class="pulse-icon ${routeDetails.status}"></span>`;

                createBusRoute(numStops, busStops, currentStop, arrivalTimeArray);
                removeLoadingSpinner();
            } else {
                const alertContainer = document.createElement("div");
                alertContainer.classList.add("alert", "alert-primary");
                alertContainer.setAttribute("role", "alert");
                alertContainer.innerHTML = "<h2>Buses with at least 1 intermediate stop are displayed here.</h2>";
                document.body.appendChild(alertContainer);
            }
        } catch (error) {
            console.error("Failed to fetch route details:", error);
        }
    }

    setInterval(fetchRouteDetails, 5000);
    // fetchRouteDetails();
</script>
